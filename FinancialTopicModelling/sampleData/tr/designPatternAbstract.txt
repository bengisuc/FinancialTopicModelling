Design Patterns (Abstract Factory)

http://c2.com/cgi/wiki?DesignPatternsBook kitabından adım adım giderek tasarım örüntülerini projelerde nerelerde hangi ihtiyaçtan dolayı kullandığımızı anlatmaya çalışacağım.

Öncelikle tasarım örüntüleri denen şey ne işe yarıyor. Tasarım örüntüleri insanların projelerinde sık sık karşılaştıkları problemler çözüm olarak getirdikleri Problem-Çözüm ilişkileridir. Bu tasarım örüntülerini kodun daha esnek olabilmesini sağlamak amacıya, kodun tekrar tekrar kullanılabilmesi amacı ile, sonradan yapılacak değişikliklere karşı fazla etkilenmemesi amacıyla geliştirilmiştir.

Tasarım örüntülerine girmeden önce Object Oriented’ta Abstraction kavramını iyi anlamak gerekir. Objelerimizi nasıl soyutlarız. Nasıl kod geliştirmeliyiz ki High Cohesion, Low Coupling yapabilelim. Birbiri ile ilişkili özellikleri ve fonksiyonları bir araya toplarken , bir yandanda birbirinden farklı olan kod birimlerine birbirlerine bağımlı hale getirmeden nasıl birbirleri ile iletişim kurmalarını sağlayabiliriz.

Bu konuda biraz daha ilerletirsek Dependeny Injection ne demek, Bir bileşeni nasıl geliştirmeliyiz ki bu bileşen sadece kendi package içerisinde kendisi ile ilgili mantıkları bilsin. Daha sonra projemizde bir çok bileşen ve ilişki olduğu zaman bu dependeny’leri nasıl yönetebiliriz. Ve sonra Spring Ioc (Inversion Of Control) gibi kütüphaneler.

Desing Pattern kitabı bu tasarım örüntülerini 3 kategori altında inceler. Creational Patterns(Oluşturma), Structural Patterns(Yapısal), Behavioral Patterns(Davranışsal) örüntüler. Bu örüntüleri kullandıkça bu ayrışmayı neden bu şekilde yaptıklarını daha iyi anlayacaksınız.
Creational Patterns

AbstactFactory, Builder, FactoryMethod, Prototype, Singleton
Structural Patterns

Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Proxy
Behavioral Patterns

Chain Of Responsibility, Command, Interpreter, Mediator, Momento, Observer, State, Strategy, Template Method, Visitor
Creational Patterns
Abstract Factory

AbstractFactory pattern’i normal üretim yapan Factory üreterek bunun üzerinden bileşenlerin üretilmesini sağlayan tasarım örüntüsüdür. Bir projede UI bileşenlerinin belli modlara göre tamamen farklı görünmesi veya davranması gerekebilir

Örneğin: Aynı bileşenler aşağıdaki modlara göre farklı davranması gerekebilir.

    UI Gündüz Modu / Gece Modu
    UI Player/ Traineer
    Editing Mode / Playing Mode / Replay Mode

Bu gibi durumlarda tüm UI bileşenlerinin bu modlara göre keskin çizgiler ile ayrılması gerekiyor ise aşağıdaki kod örneğinde olduğu gibi Abstract Factory patternini kullanırız.

Aşağıdaki kodda OSX işletim sistemi UI Bileşenleri ayrıdır, Win işletim sistemleri UI Bileşenleri ayrıdır. Ama GUIFactory interface’inden türemiş OSXFactory ve WinFactory Application bilmeden dışarıdan kendisine enjekte edilerek, içinde bulunduğu işletim sistemine uygun bileşenlerin üretilmesi sağlanır.